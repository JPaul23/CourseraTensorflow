{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dn-6c02VmqiN"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "# In this exercise you will train a CNN on the FULL Cats-v-dogs dataset\n",
    "# This will require you doing a lot of data preprocessing because\n",
    "# the dataset isn't split into training and validation for you\n",
    "# This code block has all the required inputs\n",
    "import os\n",
    "import zipfile\n",
    "import random\n",
    "import tensorflow as tf\n",
    "import shutil\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from shutil import copyfile\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3sd9dQWa23aj"
   },
   "outputs": [],
   "source": [
    "path_cats_and_dogs = f\"{getcwd()}/../tmp2/cats-and-dogs.zip\"\n",
    "shutil.rmtree('/tmp')\n",
    "\n",
    "local_zip = path_cats_and_dogs\n",
    "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
    "zip_ref.extractall('/tmp')\n",
    "zip_ref.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gi3yD62a6X3S"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1500\n",
      "1500\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/PetImages/Cat/')))\n",
    "print(len(os.listdir('/tmp/PetImages/Dog/')))\n",
    "\n",
    "# Expected Output:\n",
    "# 1500\n",
    "# 1500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "F-QkLjxpmyK2"
   },
   "outputs": [],
   "source": [
    "# Use os.mkdir to create your directories\n",
    "# You will need a directory for cats-v-dogs, and subdirectories for training\n",
    "# and testing. These in turn will need subdirectories for 'cats' and 'dogs'\n",
    "try:\n",
    "    os.mkdir('/tmp/cats-v-dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/dogs')\n",
    "    #YOUR CODE GOES HERE\n",
    "except OSError:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zvSODo0f9LaU"
   },
   "outputs": [],
   "source": [
    "# Write a python function called split_data which takes\n",
    "# a SOURCE directory containing the files\n",
    "# a TRAINING directory that a portion of the files will be copied to\n",
    "# a TESTING directory that a portion of the files will be copied to\n",
    "# a SPLIT SIZE to determine the portion\n",
    "# The files should also be randomized, so that the training set is a random\n",
    "# X% of the files, and the test set is the remaining files\n",
    "# SO, for example, if SOURCE is PetImages/Cat, and SPLIT SIZE is .9\n",
    "# Then 90% of the images in PetImages/Cat will be copied to the TRAINING dir\n",
    "# and 10% of the images will be copied to the TESTING dir\n",
    "# Also -- All images should be checked, and if they have a zero file length,\n",
    "# they will not be copied over\n",
    "#\n",
    "# os.listdir(DIRECTORY) gives you a listing of the contents of that directory\n",
    "# os.path.getsize(PATH) gives you the size of the file\n",
    "# copyfile(source, destination) copies a file from source to destination\n",
    "# random.sample(list, len(list)) shuffles a list\n",
    "def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n",
    "    # YOUR CODE STARTS HERE\n",
    "    files = []\n",
    "    for filename in os.listdir(SOURCE):\n",
    "        file = SOURCE + filename\n",
    "        if os.path.getsize(file) > 0:\n",
    "            files.append(filename)\n",
    "        else:\n",
    "            print(filename + \" has zero length\")\n",
    "            \n",
    "    train_length = int(len(files) * SPLIT_SIZE)\n",
    "    test_length = int(len(files) - train_length)\n",
    "    shuffled_set = random.sample(files, len(files))\n",
    "    train_set = shuffled_set[0:train_length]\n",
    "    test_set = shuffled_set[-test_length:]\n",
    "\n",
    "    for filename in train_set:\n",
    "        file = SOURCE + filename\n",
    "        dst = TRAINING + filename\n",
    "        copyfile(file, dst)\n",
    "\n",
    "    for filename in test_set:\n",
    "        file = SOURCE + filename\n",
    "        dst = TESTING + filename\n",
    "        copyfile(file, dst)\n",
    "\n",
    "\n",
    "# YOUR CODE ENDS HERE\n",
    "\n",
    "\n",
    "CAT_SOURCE_DIR = \"/tmp/PetImages/Cat/\"\n",
    "TRAINING_CATS_DIR = \"/tmp/cats-v-dogs/training/cats/\"\n",
    "TESTING_CATS_DIR = \"/tmp/cats-v-dogs/testing/cats/\"\n",
    "DOG_SOURCE_DIR = \"/tmp/PetImages/Dog/\"\n",
    "TRAINING_DOGS_DIR = \"/tmp/cats-v-dogs/training/dogs/\"\n",
    "TESTING_DOGS_DIR = \"/tmp/cats-v-dogs/testing/dogs/\"\n",
    "\n",
    "split_size = .9\n",
    "split_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, TESTING_CATS_DIR, split_size)\n",
    "split_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, TESTING_DOGS_DIR, split_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "luthalB76ufC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1350\n",
      "1350\n",
      "150\n",
      "150\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/cats-v-dogs/training/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/training/dogs/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/dogs/')))\n",
    "\n",
    "# Expected output:\n",
    "# 1350\n",
    "# 1350\n",
    "# 150\n",
    "# 150"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-BQrav4anTmj"
   },
   "outputs": [],
   "source": [
    "# DEFINE A KERAS MODEL TO CLASSIFY CATS V DOGS\n",
    "# USE AT LEAST 3 CONVOLUTION LAYERS\n",
    "model = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Conv2D(16,(3, 3), activation = 'relu', input_shape=(150, 150, 3)),\n",
    "    tf.keras.layers.MaxPooling2D(2, 2),\n",
    "    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu'),\n",
    "    tf.keras.layers.MaxPooling2D(2, 2),\n",
    "    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu'),\n",
    "    tf.keras.layers.MaxPooling2D(2, 2),\n",
    "    tf.keras.layers.Flatten(),\n",
    "    tf.keras.layers.Dense(512, activation = 'relu'),\n",
    "    tf.keras.layers.Dense(1, activation = \"sigmoid\")\n",
    "# YOUR CODE HERE\n",
    "])\n",
    "\n",
    "model.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NOTE:\n",
    "\n",
    "In the cell below you **MUST** use a batch size of 10 (`batch_size=10`) for the `train_generator` and the `validation_generator`. Using a batch size greater than 10 will exceed memory limits on the Coursera platform."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mlNjoJ5D61N6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2700 images belonging to 2 classes.\n",
      "Found 300 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "TRAINING_DIR = \"/tmp/cats-v-dogs/training/\"#YOUR CODE HERE\n",
    "train_datagen = ImageDataGenerator(rescale = 1./255)#YOUR CODE HERE\n",
    "\n",
    "# NOTE: YOU MUST USE A BATCH SIZE OF 10 (batch_size=10) FOR THE \n",
    "# TRAIN GENERATOR.\n",
    "train_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n",
    "                                                   target_size = (150, 150),\n",
    "                                                   batch_size = 10,\n",
    "                                                   class_mode = 'binary')#YOUR CODE HERE\n",
    "\n",
    "VALIDATION_DIR = \"/tmp/cats-v-dogs/testing/\" #YOUR CODE HERE\n",
    "validation_datagen = ImageDataGenerator(rescale = 1./255) #YOUR CODE HERE\n",
    "\n",
    "# NOTE: YOU MUST USE A BACTH SIZE OF 10 (batch_size=10) FOR THE \n",
    "# VALIDATION GENERATOR.\n",
    "validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,\n",
    "                                                             target_size = (150, 150),\n",
    "                                                             batch_size = 10,\n",
    "                                                             class_mode = 'binary') #YOUR CODE HERE\n",
    "\n",
    "\n",
    "\n",
    "# Expected Output:\n",
    "# Found 2700 images belonging to 2 classes.\n",
    "# Found 300 images belonging to 2 classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KyS4n53w7DxC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "100/100 [==============================] - 14s 144ms/step - loss: 7.4503 - acc: 0.5170 - val_loss: 7.5891 - val_acc: 0.5080\n",
      "Epoch 2/15\n",
      "100/100 [==============================] - 14s 144ms/step - loss: 7.6353 - acc: 0.5050 - val_loss: 7.6199 - val_acc: 0.5060\n",
      "Epoch 3/15\n",
      "100/100 [==============================] - 14s 141ms/step - loss: 8.0364 - acc: 0.4790 - val_loss: 7.4965 - val_acc: 0.5140\n",
      "Epoch 4/15\n",
      "100/100 [==============================] - 14s 138ms/step - loss: 7.6353 - acc: 0.5050 - val_loss: 7.8050 - val_acc: 0.4940\n",
      "Epoch 5/15\n",
      "100/100 [==============================] - 14s 139ms/step - loss: 7.7896 - acc: 0.4950 - val_loss: 7.7125 - val_acc: 0.5000\n",
      "Epoch 6/15\n",
      "100/100 [==============================] - 14s 139ms/step - loss: 7.8359 - acc: 0.4920 - val_loss: 7.8359 - val_acc: 0.4920\n",
      "Epoch 7/15\n",
      "100/100 [==============================] - 14s 138ms/step - loss: 7.2497 - acc: 0.5300 - val_loss: 7.8667 - val_acc: 0.4900\n",
      "Epoch 8/15\n",
      "100/100 [==============================] - 14s 138ms/step - loss: 7.9130 - acc: 0.4870 - val_loss: 7.7125 - val_acc: 0.5000\n",
      "Epoch 9/15\n",
      "100/100 [==============================] - 14s 145ms/step - loss: 7.8821 - acc: 0.4890 - val_loss: 7.8050 - val_acc: 0.4940\n",
      "Epoch 10/15\n",
      "100/100 [==============================] - 14s 142ms/step - loss: 7.3886 - acc: 0.5210 - val_loss: 7.7433 - val_acc: 0.4980\n",
      "Epoch 11/15\n",
      "100/100 [==============================] - 14s 139ms/step - loss: 8.1598 - acc: 0.4710 - val_loss: 7.6508 - val_acc: 0.5040\n",
      "Epoch 12/15\n",
      "100/100 [==============================] - 14s 137ms/step - loss: 7.8976 - acc: 0.4880 - val_loss: 7.8667 - val_acc: 0.4900\n",
      "Epoch 13/15\n",
      "100/100 [==============================] - 14s 137ms/step - loss: 7.4348 - acc: 0.5180 - val_loss: 7.7433 - val_acc: 0.4980\n",
      "Epoch 14/15\n",
      "100/100 [==============================] - 14s 138ms/step - loss: 7.6970 - acc: 0.5010 - val_loss: 7.7433 - val_acc: 0.4980\n",
      "Epoch 15/15\n",
      "100/100 [==============================] - 14s 137ms/step - loss: 7.3423 - acc: 0.5240 - val_loss: 7.6816 - val_acc: 0.5020\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_generator,\n",
    "                              steps_per_epoch=100,\n",
    "                              epochs=15,\n",
    "                              validation_steps=50,\n",
    "                              verbose=1,\n",
    "                              validation_data=validation_generator)  #this was changed by me\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MWZrJN4-65RC"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Training and validation loss')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PLOT LOSS AND ACCURACY\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.image  as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#-----------------------------------------------------------\n",
    "# Retrieve a list of list results on training and test data\n",
    "# sets for each training epoch\n",
    "#-----------------------------------------------------------\n",
    "acc=history.history['acc']\n",
    "val_acc=history.history['val_acc']\n",
    "loss=history.history['loss']\n",
    "val_loss=history.history['val_loss']\n",
    "\n",
    "epochs=range(len(acc)) # Get number of epochs\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation accuracy per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, acc, 'r', \"Training Accuracy\")\n",
    "plt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.figure()\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation loss per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, loss, 'r', \"Training Loss\")\n",
    "plt.plot(epochs, val_loss, 'b', \"Validation Loss\")\n",
    "\n",
    "\n",
    "plt.title('Training and validation loss')\n",
    "\n",
    "# Desired output. Charts with training and validation metrics. No crash :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Exercise 5 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "laIUG",
   "launcher_item_id": "jjQWM"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
